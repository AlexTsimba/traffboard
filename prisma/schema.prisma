generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model User {
  id               String      @id @default(cuid())
  name             String
  email            String      @unique
  emailVerified    Boolean     @default(false)
  image            String?
  password         String?
  twoFactorEnabled Boolean     @default(false)
  role             String      @default("user")
  banned           Boolean     @default(false)
  banExpiresAt     DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  banReason        String?
  banExpires       DateTime?
  accounts         Account[]
  importJobs       ImportJob[]
  sessions         Session[]
  twoFactor        TwoFactor?

  @@map("user")
}

model Session {
  id             String   @id @default(cuid())
  userId         String
  token          String   @unique
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  idToken               String?
  refreshTokenExpiresAt DateTime?
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model TwoFactor {
  id          String  @id @default(cuid())
  userId      String  @unique
  secret      String?
  backupCodes String?
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?

  @@unique([identifier, value])
  @@map("verification")
}

model TrafficReport {
  id                 Int      @id @default(autoincrement())
  date               DateTime
  foreignBrandId     Int
  foreignPartnerId   Int
  foreignCampaignId  Int
  foreignLandingId   Int
  trafficSource      String?
  deviceType         String
  userAgentFamily    String
  osFamily           String
  country            String
  allClicks          Int
  uniqueClicks       Int
  registrationsCount Int
  ftdCount           Int
  depositsCount      Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([date, foreignPartnerId, foreignCampaignId, foreignLandingId, trafficSource, deviceType, userAgentFamily, osFamily, country])
  @@index([date])
  @@index([foreignPartnerId])
  @@index([foreignCampaignId])
  @@index([country])
  @@index([date, foreignPartnerId])
  @@map("traffic_report")
}

model PlayersData {
  id               Int       @id @default(autoincrement())
  playerId         Int
  originalPlayerId Int
  signUpDate       DateTime
  firstDepositDate DateTime?
  partnerId        Int
  companyName      String
  partnerTags      String
  campaignId       Int
  campaignName     String
  promoId          Int
  promoCode        String
  playerCountry    String
  tagClickid       String?
  tagOs            String?
  tagSource        String?
  tagSub2          String?
  tagWebId         String?
  date             DateTime
  prequalified     Int
  duplicate        Int
  selfExcluded     Int
  disabled         Int
  currency         String
  ftdCount         Int
  ftdSum           Decimal   @db.Decimal(10, 2)
  depositsCount    Int
  depositsSum      Decimal   @db.Decimal(10, 2)
  cashoutsCount    Int
  cashoutsSum      Decimal   @db.Decimal(10, 2)
  casinoBetsCount  Int
  casinoRealNgr    Decimal   @db.Decimal(10, 2)
  fixedPerPlayer   Decimal   @db.Decimal(10, 2)
  casinoBetsSum    Decimal   @db.Decimal(12, 2)
  casinoWinsSum    Decimal   @db.Decimal(12, 2)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@unique([playerId, date])
  @@index([date])
  @@index([partnerId])
  @@index([campaignId])
  @@index([playerCountry])
  @@index([signUpDate])
  @@index([date, partnerId])
  @@index([playerId])
  @@map("players_data")
}

model ImportJob {
  id            String   @id @default(cuid())
  userId        String
  type          String
  status        String
  filename      String
  totalRows     Int?
  processedRows Int      @default(0)
  errors        Json?
  csvContent    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([createdAt])
  @@map("import_job")
}
